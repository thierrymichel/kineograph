// Kineograph, a JavaScript plugin that displays frames or sequences of frames from a sprite sheet image.
// by Fabrice Lejeune for EPIC Agency, http://epic.net
// 
// Version 0.1.4
// Full source at https://github.com/epicagency/kineograph
// Copyright (c) 2012 EPIC Agency http://epic.net

// MIT License, https://github.com/epicagency/kineograph/blob/master/LICENSE.md
// This file is generated by `cake build`, do not edit it by hand.
(function() {
  var Kineograph,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Kineograph = (function() {

    Kineograph.prototype.complete = true;

    Kineograph.prototype.onLoadComplete = null;

    Kineograph.prototype.onAnimationEnd = null;

    Kineograph.prototype.currentFrame = -1;

    Kineograph.prototype.currentAnimation = null;

    Kineograph.prototype.paused = true;

    Kineograph.prototype.spriteSheet = null;

    Kineograph.prototype.currentAnimationFrame = 0;

    Kineograph.prototype._advanceCount = 0;

    Kineograph.prototype._animations = null;

    Kineograph.prototype._animation = null;

    Kineograph.prototype._frames = null;

    Kineograph.prototype._images = null;

    Kineograph.prototype._data = null;

    Kineograph.prototype._loadCount = 0;

    Kineograph.prototype._frameHeight = 0;

    Kineograph.prototype._frameWidth = 0;

    Kineograph.prototype._numFrames = 0;

    Kineograph.prototype._regX = 0;

    Kineograph.prototype._regY = 0;

    Kineograph.prototype._fps = 24;

    function Kineograph(data) {
      this._goto = __bind(this._goto, this);

      this._normalizeFrame = __bind(this._normalizeFrame, this);

      this._calculateFrames = __bind(this._calculateFrames, this);

      this._handleImageLoad = __bind(this._handleImageLoad, this);

      this._draw = __bind(this._draw, this);

      this._advance = __bind(this._advance, this);

      this._tick = __bind(this._tick, this);

      this.getFrame = __bind(this.getFrame, this);

      this.getAnimation = __bind(this.getAnimation, this);

      this.getAnimations = __bind(this.getAnimations, this);

      this.getNumFrames = __bind(this.getNumFrames, this);

      this.gotoAndStop = __bind(this.gotoAndStop, this);

      this.gotoAndPlay = __bind(this.gotoAndPlay, this);

      this.stop = __bind(this.stop, this);

      this.play = __bind(this.play, this);

      var anim, frame, frames, i, image, name, obj, src, _i, _j, _k, _len, _len1, _ref, _ref1, _ref2, _ref3, _ref4;
      if (!data) {
        return;
      }
      if (data.fps) {
        this._fps = data.fps;
      }
      if (data.images && data.images.length > 0) {
        this._images = [];
        _ref = data.images;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          image = _ref[_i];
          if (typeof image === "string") {
            src = image;
            image = new Image();
            image.src = src;
            // first attemp with ugly hackâ€¦
            // image.src = src + '?' + new Date().getTime();
          }
          this._images.push(image);
          // if (!(image.getContext || image.complete)) {
            this._loadCount++;
            this.complete = false;
            image.onload = this._handleImageLoad;
          // }
        }
      }
      if (data.frames instanceof Array) {
        this._frames = [];
        _ref1 = data.frames;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          frame = _ref1[_j];
          this._frames.push({
            image: this._images[frame[4] ? frame[4] : 0],
            rect: {
              x: frame[0],
              y: frame[1],
              width: frame[2],
              height: frame[3]
            },
            regX: frame[5] || 0,
            regY: frame[6] || 0
          });
        }
      } else {
        frame = data.frames;
        this._frameWidth = frame.width;
        this._frameHeight = frame.height;
        this._regX = frame.regX || 0;
        this._regY = frame.regY || 0;
        this._numFrames = frame.count;
        if (this._loadCount === 0) {
          this._calculateFrames();
        }
      }
      if (data.animations) {
        this._animations = [];
        this._data = {};
        _ref2 = data.animations;
        for (name in _ref2) {
          obj = _ref2[name];
          anim = {
            name: name
          };
          if (!isNaN(obj)) {
            anim.frames = [obj];
          } else if (obj instanceof Array) {
            anim.frequency = obj[3];
            anim.next = obj[2];
            anim.frames = [];
            for (i = _k = _ref3 = obj[0], _ref4 = obj[1]; _ref3 <= _ref4 ? _k <= _ref4 : _k >= _ref4; i = _ref3 <= _ref4 ? ++_k : --_k) {
              anim.frames.push(i);
            }
          } else {
            anim.frequency = obj.frequency;
            anim.next = obj.next;
            frames = obj.frames;
            anim.frames = typeof frames === "number" ? [frames] : frames.slice(0);
          }
          anim.next = anim.frames.length < 2 || anim.next === false ? null : anim.next === null || anim.next === true ? name : anim.next;
          if (!anim.frequency) {
            anim.frequency = 1;
          }
          this._animations.push(name);
          this._data[name] = anim;
        }
      }
      this.kineograph = document.createElement("IMG");
      this.kineograph.src = "";
      this.kineograph.style.display = "inline-block";
      this.kineograph.style.position = "relative";
      if (data.container) {
        this.container = data.container;
      } else {
        this.container = document.createElement("DIV");
        document.body.appendChild(this.container);
      }
      this.container.innerHTML = "";
      this.container.style.width = "" + this._frameWidth + "px";
      this.container.style.height = "" + this._frameHeight + "px";
      this.container.style.overflow = "hidden";
      this.container.style.position = "relative";
      this.container.appendChild(this.kineograph);
      this.tick = setInterval(this._tick, 1000 / this._fps);
    }

    Kineograph.prototype.play = function() {
      return this.paused = false;
    };

    Kineograph.prototype.stop = function() {
      return this.paused = true;
    };

    Kineograph.prototype.gotoAndPlay = function(frameOrAnimation) {
      this.paused = false;
      return this._goto(frameOrAnimation);
    };

    Kineograph.prototype.gotoAndStop = function(frameOrAnimation) {
      this.paused = true;
      return this._goto(frameOrAnimation);
    };

    Kineograph.prototype.getNumFrames = function(animation) {
      var data, ret;
      if (!animation) {
        ret = this._frames ? this._frames.length : this._numFrames;
      } else {
        data = this._data[animation];
        ret = !data ? 0 : data.frames.length;
      }
      return ret;
    };

    Kineograph.prototype.getAnimations = function() {
      return this._animations.slice(0);
    };

    Kineograph.prototype.getAnimation = function(name) {
      return this._data[name];
    };

    Kineograph.prototype.getFrame = function(frameIndex) {
      var frame, ret;
      ret = null;
      if (this.complete && this._frames && (frame = this._frames[frameIndex])) {
        ret = frame;
      }
      return ret;
    };

    Kineograph.prototype._tick = function() {
      var f;
      f = this._animation ? this._animation.frequency : 1;
      if (!this.paused && (++this._advanceCount) % f === 0) {
        this._advance();
      }
      return this._draw();
    };

    Kineograph.prototype._advance = function() {
      if (this._animation) {
        this.currentAnimationFrame++;
      } else {
        this.currentFrame++;
      }
      return this._normalizeFrame();
    };

    Kineograph.prototype._draw = function() {
      var frame, rect;
      frame = this.getFrame(this.currentFrame);
      if (!frame) {
        return;
      }
      rect = frame.rect;
      if (this.kineograph.src !== frame.image.src) {
        this.kineograph.src = "" + frame.image.src;
      }
      if (this.kineograph.style.width !== frame.image.width) {
        this.kineograph.style.width = "" + frame.image.width + "px";
      }
      if (this.kineograph.style.height !== frame.image.height) {
        this.kineograph.style.height = "" + frame.image.height + "px";
      }
      this.kineograph.style.left = "-" + rect.x + "px";
      this.kineograph.style.top = "-" + rect.y + "px";
      return true;
    };

    Kineograph.prototype._handleImageLoad = function() {
      if (--this._loadCount === 0) {
        this._calculateFrames();
        this.complete = true;
        if (this.onLoadComplete) {
          return this.onLoadComplete();
        }
      }
    };

    Kineograph.prototype._calculateFrames = function() {
      var cols, fh, fw, image, j, rows, ttl, ttlFrames, _i, _j, _len, _ref, _ref1;
      if (this._frames || this._frameWidth === 0) {
        return;
      }
      this._frames = [];
      ttlFrames = 0;
      fw = this._frameWidth;
      fh = this._frameHeight;
      _ref = this._images;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        image = _ref[_i];
        cols = (image.width + 1) / fw | 0;
        rows = (image.height + 1) / fh | 0;
        ttl = this._numFrames > 0 ? Math.min(this._numFrames - ttlFrames, cols * rows) : cols * rows;
        for (j = _j = 0, _ref1 = ttl - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
          this._frames.push({
            image: image,
            rect: {
              x: j % cols * fw,
              y: (j / cols | 0) * fh,
              width: fw,
              height: fh
            },
            regX: this._regX,
            regY: this._regY
          });
        }
        ttlFrames += ttl;
      }
      return this._numFrames = ttlFrames;
    };

    Kineograph.prototype._normalizeFrame = function() {
      var a;
      a = this._animation;
      if (a) {
        if (this.currentAnimationFrame >= a.frames.length) {
          if (a.next) {
            this._goto(a.next);
          } else {
            this.paused = true;
            this.currentAnimationFrame = a.frames.length - 1;
            this.currentFrame = a.frames[this.currentAnimationFrame];
          }
          if (this.onAnimationEnd) {
            return this.onAnimationEnd(a.name);
          }
        } else {
          return this.currentFrame = a.frames[this.currentAnimationFrame];
        }
      } else {
        if (this.currentFrame >= this.getNumFrames()) {
          this.currentFrame = 0;
          if (this.onAnimationEnd) {
            return this.onAnimationEnd(null);
          }
        }
      }
    };

    Kineograph.prototype._goto = function(frameOrAnimation) {
      var data;
      if (isNaN(frameOrAnimation)) {
        data = this.getAnimation(frameOrAnimation);
        if (data) {
          this.currentAnimationFrame = 0;
          this._animation = data;
          this.currentAnimation = frameOrAnimation;
          return this._normalizeFrame();
        }
      } else {
        this.currentAnimation = this._animation = null;
        return this.currentFrame = frameOrAnimation;
      }
    };

    return Kineograph;

  })();

  window.Kineograph = Kineograph;

}).call(this);
